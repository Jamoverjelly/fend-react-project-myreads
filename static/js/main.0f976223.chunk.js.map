{"version":3,"sources":["book.js","BooksAPI.js","searchPage.js","mainPage.js","App.js","serviceWorker.js","index.js"],"names":["Book","_this","this","thumbnail","props","book","imageLinks","react_default","a","createElement","className","style","width","height","backgroundImage","concat","onChange","event","updateShelf","target","value","currentShelf","disabled","title","authors","Component","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","books","update","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","SearchPage","state","retrievedBooks","udpateQuery","setState","updateRetrievedBooks","BooksAPI","error","_this2","Link","to","type","placeholder","map","retrievedBook","booksList","key","src_book","MainPage","filter","BooksApp","_this3","Route","exact","path","render","mainPage","searchPage","React","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f976223.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Book extends Component {\n    render() {\n        // check if thumbnail property exists, if it does pass thumbnail string, if not, pass empty string\n        let thumbnail = this.props.book.imageLinks ? this.props.book.imageLinks.thumbnail : '';\n        return(\n            <div className=\"book\">\n                <div className=\"book-top\">\n                    <div\n                        className=\"book-cover\"\n                        style={{\n                            width: 128,\n                            height: 193,\n                            // Begin Attribution\n                            // Referenced helper code for in-lining styles in React JSX here at:\n                            // https://stackoverflow.com/questions/47950833/react-why-is-double-brace-syntax-style-required-for-inline-styles\n                            // on October 8, 2018\n                            // End Attribution\n                            backgroundImage: `url(${thumbnail})` }}\n                    ></div>\n                    <div className=\"book-shelf-changer\">\n                        {/* make call to updateShelf each time change event is detected on the book shelf changer control */}\n                        <select\n                            onChange={(event) => this.props.updateShelf(\n                                // pass parameters needed for update method up to parent\n                                this.props.book,\n                                // access shelf string from event.target\n                                event.target.value\n                            )}\n                            // access current shelf data passed from parent as prop\n                            value={this.props.currentShelf}\n                            >\n                            <option value=\"move\" disabled>Move to...</option>\n                            <option value=\"currentlyReading\">Currently Reading</option>\n                            <option value=\"wantToRead\">Want to Read</option>\n                            <option value=\"read\">Read</option>\n                            <option value=\"none\">None</option>\n                        </select>\n                    </div>\n                </div>\n                {/* access book title from props object */}\n                <div className=\"book-title\">{this.props.book.title}</div>\n                {/* access book authors from props object */}\n                <div className=\"book-authors\">{this.props.book.authors}</div>\n            </div>\n        );\n    }\n}\n\nexport default Book;","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\nimport Book from './book'\n\nimport * as BooksAPI from './BooksAPI'\nimport { Link } from 'react-router-dom'\n\nclass SearchPage extends Component {\n  state = {\n    query: '',\n    // books added to this array will be filtered by current query state\n    retrievedBooks: []\n  }\n\n  udpateQuery = (query) => {\n    // modify query state based on argument passed into updateQuery as 'query'\n    this.setState({\n      query: query\n    })\n\n    // each time the query state changes in response to text input, call updateRetrievedBooks passing query.\n    // This will update the component state causing re-render\n    this.updateRetrievedBooks(query);\n  }\n\n  // method will update state of retrievedBooks array so they can be rendered to the page as search results based on the query state\n  updateRetrievedBooks = (query) => {\n    // if query state is truthy\n    if (query) {\n      // utilize search method, passing query state as string argument, this returns a Promise which resolves to JSON collection obj\n      BooksAPI.search(query).then((retrievedBooks) => {\n        // if no books are actually retrieved by current input,\n        // an error is thrown when .map is encountered as no array has been passed\n        // so, handle the error\n        if (retrievedBooks.error) {\n          // if nothing is retrieved, empty state array while still returning an array object to pass to .map\n          this.setState( {retrievedBooks: []} )\n        } else {\n          // when books are successfully retrieved, then update state of retrievedBooks array\n          this.setState( {retrievedBooks} )\n        }\n      })\n      // when query state is falsy, i.e., no text input\n    } else {\n        // update state so retrievedBooks renders nothing, i.e, by default, retrievedBooks is an empty array\n        this.setState( {retrievedBooks: []} )\n    } \n  }\n\n  render() {\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          {/* adding link functionality from React Router */}\n          <Link\n            // specify url path for viewing main page\n            to=\"/\"\n            className=\"close-search\"          \n          >Close</Link>\n          \n          <div className=\"search-books-input-wrapper\">\n            <input\n              type=\"text\"\n              placeholder=\"Search by title or author\"\n              // set value of input field to current query state\n              value={this.state.query}\n              // any text entered in input is captured as event and passed into udpateQuery, updating the query state\n              onChange={(event) => this.udpateQuery(event.target.value)}\n            />\n          </div>\n        </div>\n\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {/* search results will be rendered here */}\n            {\n              // map over current state of retrievedBooks array and render to the page\n              this.state.retrievedBooks.map(retrievedBook => {\n                // mutable variable shelf will specify default value, 'none' to pass for books which haven't been shelved\n                let shelf = 'none';\n                \n                // map over array of all books passed as props from BooksApp\n                this.props.booksList.map(book => (\n                  // check if current book id matches id of retrieved book\n                  book.id === retrievedBook.id ?\n                  // if match is truthy, set this book's shelf to same as book.shelf\n                  shelf = book.shelf :\n                  // if match is falsy, book is un-shelved so do nothing\n                  ''\n                ));\n                \n                return (\n                  // must add unique key prop to each retrieved book as they're rendered\n                  <li key={retrievedBook.id}>\n                    <Book\n                      // pass retrievedBooks data to Book component\n                      book={retrievedBook}\n                      // pass updateShelf method to Book component using props\n                      updateShelf={this.props.updateShelf}\n                      // set up attribute to pass default shelf state to Book component\n                      currentShelf={shelf}\n                    />\n                  </li>\n                )\n              })\n            }\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchPage;","import React, { Component } from 'react'\nimport Book from './book.js'\n\nimport { Link } from 'react-router-dom'\n\nclass MainPage extends Component {\n    render() {\n        return (\n            <div className=\"list-books\">\n                <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n                </div>\n                <div className=\"list-books-content\">\n                <div>\n                    <div className=\"bookshelf\">\n                    <h2 className=\"bookshelf-title\">Currently Reading</h2>\n                    <div className=\"bookshelf-books\">\n                        <ol className=\"books-grid\">\n                            {\n                                // access array passed in via props\n                                this.props.books\n                                    // filter over array, returning new array based on book's shelf property\n                                    .filter(book => book.shelf === 'currentlyReading')\n                                    // map over filtered array, adding to render\n                                    .map(book => (\n                                        // add unique key prop id to each book child as they're rendered\n                                        <li key={book.id}>\n                                            <Book\n                                                // must pass props through to Book component to access book object properties\n                                                book={book}\n                                                // pass updateShelf through to Book component\n                                                updateShelf={this.props.updateShelf}\n                                                // pass current shelf string to child component\n                                                currentShelf='currentlyReading'\n                                            />\n                                        </li>\n                                    ))\n                            }\n                        </ol>\n                    </div>\n                    </div>\n                    <div className=\"bookshelf\">\n                    <h2 className=\"bookshelf-title\">Want to Read</h2>\n                    <div className=\"bookshelf-books\">\n                        <ol className=\"books-grid\">\n                            {\n                                // access array passed in via props\n                                this.props.books\n                                    // filter over array, returning new array based on book's shelf property\n                                    .filter(book => book.shelf === 'wantToRead')\n                                    // map over filtered array, adding to render\n                                    .map(book => (\n                                        // add unique key prop id to each book child as they're rendered\n                                        <li key={book.id}>\n                                            <Book\n                                                // must pass props through to Book component to access book object properties\n                                                book={book}\n                                                // pass updateShelf through to Book component\n                                                updateShelf={this.props.updateShelf}\n                                                // pass current shelf string to child component\n                                                currentShelf='wantToRead'\n                                            />\n                                        </li>\n                                    ))\n                            }\n                        </ol>\n                    </div>\n                    </div>\n                    <div className=\"bookshelf\">\n                    <h2 className=\"bookshelf-title\">Read</h2>\n                    <div className=\"bookshelf-books\">\n                        <ol className=\"books-grid\">\n                            {\n                                // access array passed in via props\n                                this.props.books\n                                    // filter over array, returning new array based on book's shelf property\n                                    .filter(book => book.shelf === 'read')\n                                    // map over filtered array, adding to render\n                                    .map(book => (\n                                        // add unique key prop id to each book child as they're rendered\n                                        <li key={book.id}>\n                                            <Book\n                                                // must pass props through to Book component to access book object properties\n                                                book={book}\n                                                // pass updateShelf through to Book component\n                                                updateShelf={this.props.updateShelf}\n                                                // pass current shelf string to child component\n                                                currentShelf='read'\n                                            />\n                                        </li>\n                                    ))\n                            }\n                        </ol>\n                    </div>\n                    </div>\n                </div>\n                </div>\n                <div className=\"open-search\">\n                    {/* adding link functionality from React Router */}\n                    <Link\n                      // specify url path for viewing search page\n                      to='/search'\n                    >Add a book</Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainPage;","import React from 'react'\nimport './App.css'\n\nimport SearchPage from './searchPage'\nimport MainPage from './mainPage'\n\nimport * as BooksAPI from './BooksAPI'\nimport { Route } from 'react-router-dom'\n\nclass BooksApp extends React.Component {\n  state = {\n    // array container for holding dynamic state data for books\n    booksList: []\n  }\n\n  // perform fetch once component has completed initial render\n  componentDidMount() {\n    // retrieving book data from API returns Promise\n    BooksAPI.getAll().then((books) => {\n      // update state for booksList, triggers re-render\n      this.setState({ booksList: books })\n    })\n  }\n\n  // create method for changing shelf status of book on both the main page and search page\n  updateShelf = (book, shelf) => {\n    // utilizing update method from BooksAPI, pass in parameters\n    BooksAPI.update(book, shelf);\n\n    // Re-run fetch request for books data, update state of booksList\n    BooksAPI.getAll().then((books) => {\n      this.setState({ booksList: books })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {/* route for rendering main page */}\n        <Route exact path='/' render={() => (\n          <MainPage\n            // booksList state can be passed to MainPage component as immutable props, books\n            books={this.state.booksList}\n            // provide access to updateShelf method in MainPage component, passing data down through children components\n            updateShelf={this.updateShelf}\n          />\n        )}/>\n        {/* route for rendering search page */}\n        <Route path='/search' render={() => (\n          <SearchPage\n            // provide access to updateShelf method in SearchPage component\n            updateShelf={this.updateShelf}\n            // send current state of booksList to SearchPage component\n            booksList={this.state.booksList}\n          />\n        )}/>\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter><App /></BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}